const { createClient } = require("@supabase/supabase-js");

// Configura√ß√£o do Supabase
const supabaseUrl = "https://dajeywbevoxzrffhtapu.supabase.co";
const supabaseKey =
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRhamV5d2Jldm94enJmZmh0YXB1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU0NDQyNzgsImV4cCI6MjA3MTAyMDI3OH0.N7RHJuYmjxyR45UthuOGnOuqHpLI_vsnoA--CBS31P8";

const supabase = createClient(supabaseUrl, supabaseKey);

// ID do usu√°rio de teste (voc√™ precisar√° substituir por um ID real)
const TEST_USER_ID = "a763ffe9-8415-4682-810b-689140fe4db5"; // ID do usu√°rio criado

// Dados de teste
const concursosTeste = [
  {
    id: "3c6dff36-4971-4f3e-ac56-701efa04cd86",
    user_id: TEST_USER_ID,
    title: "Concurso P√∫blico Federal - Analista de Sistemas",
    organizer: "Minist√©rio da Educa√ß√£o",
    registration_date: "2024-03-15",
    exam_date: "2024-05-20",
    edital_link: "https://exemplo.gov.br/edital",
    status: "estudando",
  },
  {
    id: "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
    user_id: TEST_USER_ID,
    title: "Concurso Tribunal de Justi√ßa - T√©cnico Judici√°rio",
    organizer: "TJ-SP",
    registration_date: "2024-02-01",
    exam_date: "2024-04-15",
    edital_link: "https://tjsp.jus.br/edital",
    status: "planejado",
  },
];

const disciplinasTeste = [
  // Disciplinas para o primeiro concurso
  {
    id: "d1111111-1111-1111-1111-111111111111",
    competition_id: "3c6dff36-4971-4f3e-ac56-701efa04cd86",
    name: "Direito Constitucional",
    progress: 25,
  },
  {
    id: "d2222222-2222-2222-2222-222222222222",
    competition_id: "3c6dff36-4971-4f3e-ac56-701efa04cd86",
    name: "Direito Administrativo",
    progress: 50,
  },
  {
    id: "d3333333-3333-3333-3333-333333333333",
    competition_id: "3c6dff36-4971-4f3e-ac56-701efa04cd86",
    name: "Inform√°tica",
    progress: 75,
  },
  // Disciplinas para o segundo concurso
  {
    id: "d4444444-4444-4444-4444-444444444444",
    competition_id: "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
    name: "Portugu√™s",
    progress: 30,
  },
  {
    id: "d5555555-5555-5555-5555-555555555555",
    competition_id: "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
    name: "Matem√°tica",
    progress: 60,
  },
];

const topicosTeste = [
  // T√≥picos de Direito Constitucional
  {
    id: "t1111111-1111-1111-1111-111111111111",
    subject_id: "d1111111-1111-1111-1111-111111111111",
    name: "Princ√≠pios Fundamentais",
    completed: true,
  },
  {
    id: "t1111112-1111-1111-1111-111111111111",
    subject_id: "d1111111-1111-1111-1111-111111111111",
    name: "Direitos e Garantias Fundamentais",
    completed: false,
  },
  {
    id: "t1111113-1111-1111-1111-111111111111",
    subject_id: "d1111111-1111-1111-1111-111111111111",
    name: "Organiza√ß√£o do Estado",
    completed: false,
  },
  // T√≥picos de Direito Administrativo
  {
    id: "t2222221-2222-2222-2222-222222222222",
    subject_id: "d2222222-2222-2222-2222-222222222222",
    name: "Atos Administrativos",
    completed: true,
  },
  {
    id: "t2222222-2222-2222-2222-222222222222",
    subject_id: "d2222222-2222-2222-2222-222222222222",
    name: "Licita√ß√µes e Contratos",
    completed: false,
  },
  // T√≥picos de Inform√°tica
  {
    id: "t3333331-3333-3333-3333-333333333333",
    subject_id: "d3333333-3333-3333-3333-333333333333",
    name: "Sistemas Operacionais",
    completed: true,
  },
  {
    id: "t3333332-3333-3333-3333-333333333333",
    subject_id: "d3333333-3333-3333-3333-333333333333",
    name: "Redes de Computadores",
    completed: true,
  },
  {
    id: "t3333333-3333-3333-3333-333333333333",
    subject_id: "d3333333-3333-3333-3333-333333333333",
    name: "Seguran√ßa da Informa√ß√£o",
    completed: false,
  },
];

const questoesTeste = [
  {
    id: "q1111111-1111-1111-1111-111111111111",
    competition_id: "3c6dff36-4971-4f3e-ac56-701efa04cd86",
    subject_id: "d1111111-1111-1111-1111-111111111111",
    topic_id: "t1111111-1111-1111-1111-111111111111",
    question_text:
      "Sobre os princ√≠pios fundamentais da Constitui√ß√£o Federal de 1988, √© correto afirmar que:",
    options: [
      {
        text: "A Rep√∫blica Federativa do Brasil √© formada pela uni√£o indissol√∫vel dos Estados, Munic√≠pios e do Distrito Federal.",
        isCorrect: true,
      },
      {
        text: "O Brasil √© uma Rep√∫blica Federativa Presidencialista.",
        isCorrect: false,
      },
      {
        text: "A soberania popular √© exercida exclusivamente pelo voto direto.",
        isCorrect: false,
      },
      {
        text: "A cidadania √© um dos objetivos fundamentais da Rep√∫blica.",
        isCorrect: false,
      },
      {
        text: "A dignidade da pessoa humana √© um princ√≠pio sens√≠vel.",
        isCorrect: false,
      },
    ],
    correct_answer: 0,
    explanation:
      "A Constitui√ß√£o Federal estabelece em seu artigo 1¬∫ que a Rep√∫blica Federativa do Brasil √© formada pela uni√£o indissol√∫vel dos Estados e Munic√≠pios e do Distrito Federal.",
    difficulty: "medio",
    is_ai_generated: false,
  },
  {
    id: "q2222222-2222-2222-2222-222222222222",
    competition_id: "3c6dff36-4971-4f3e-ac56-701efa04cd86",
    subject_id: "d2222222-2222-2222-2222-222222222222",
    topic_id: "t2222221-2222-2222-2222-222222222222",
    question_text: "Quanto aos atos administrativos, analise as assertivas:",
    options: [
      {
        text: "Todos os atos administrativos s√£o autoexecut√≥rios.",
        isCorrect: false,
      },
      { text: "A presun√ß√£o de legitimidade √© absoluta.", isCorrect: false },
      {
        text: "A imperatividade √© caracter√≠stica de todos os atos administrativos.",
        isCorrect: false,
      },
      {
        text: "Os atos administrativos gozam de presun√ß√£o relativa de legitimidade.",
        isCorrect: true,
      },
      {
        text: "A tipicidade n√£o √© atributo dos atos administrativos.",
        isCorrect: false,
      },
    ],
    correct_answer: 3,
    explanation:
      "Os atos administrativos gozam de presun√ß√£o relativa (juris tantum) de legitimidade, que pode ser afastada mediante prova em contr√°rio.",
    difficulty: "dificil",
    is_ai_generated: false,
  },
  {
    id: "q3333333-3333-3333-3333-333333333333",
    competition_id: "3c6dff36-4971-4f3e-ac56-701efa04cd86",
    subject_id: "d3333333-3333-3333-3333-333333333333",
    topic_id: "t3333331-3333-3333-3333-333333333333",
    question_text:
      "No sistema operacional Windows, qual tecla de atalho permite alternar entre aplica√ß√µes abertas?",
    options: [
      { text: "Ctrl + Alt + Del", isCorrect: false },
      { text: "Alt + Tab", isCorrect: true },
      { text: "Ctrl + Shift + Esc", isCorrect: false },
      { text: "Windows + Tab", isCorrect: false },
      { text: "Ctrl + Tab", isCorrect: false },
    ],
    correct_answer: 1,
    explanation:
      "A combina√ß√£o Alt + Tab √© o atalho padr√£o para alternar entre aplica√ß√µes abertas no Windows.",
    difficulty: "facil",
    is_ai_generated: false,
  },
];

async function seedDatabase() {
  console.log(
    "üå± Iniciando popula√ß√£o da base de dados com dados de teste...\n",
  );

  try {
    // Autenticar com o usu√°rio de teste primeiro
    console.log("üîê Autenticando usu√°rio de teste...");
    const { data: authData, error: authError } =
      await supabase.auth.signInWithPassword({
        email: "teste@stayfocus.com",
        password: "senha123!@#",
      });

    if (authError) {
      console.error("‚ùå Erro na autentica√ß√£o:", authError);
      return;
    }
    console.log("‚úÖ Usu√°rio autenticado:", authData.user?.email);
    // 1. Limpar dados existentes (opcional)
    console.log("üßπ Limpando dados existentes...");
    await supabase
      .from("competition_questions")
      .delete()
      .neq("id", "00000000-0000-0000-0000-000000000000");
    await supabase
      .from("competition_topics")
      .delete()
      .neq("id", "00000000-0000-0000-0000-000000000000");
    await supabase
      .from("competition_subjects")
      .delete()
      .neq("id", "00000000-0000-0000-0000-000000000000");
    await supabase
      .from("competitions")
      .delete()
      .neq("id", "00000000-0000-0000-0000-000000000000");

    // 2. Inserir concursos
    console.log("üéØ Inserindo concursos...");
    const { data: concursosData, error: concursosError } = await supabase
      .from("competitions")
      .insert(concursosTeste);

    if (concursosError) {
      console.error("‚ùå Erro ao inserir concursos:", concursosError);
      return;
    }
    console.log(`‚úÖ ${concursosTeste.length} concursos inseridos`);

    // 3. Inserir disciplinas
    console.log("üìö Inserindo disciplinas...");
    const { data: disciplinasData, error: disciplinasError } = await supabase
      .from("competition_subjects")
      .insert(disciplinasTeste);

    if (disciplinasError) {
      console.error("‚ùå Erro ao inserir disciplinas:", disciplinasError);
      return;
    }
    console.log(`‚úÖ ${disciplinasTeste.length} disciplinas inseridas`);

    // 4. Inserir t√≥picos
    console.log("üìù Inserindo t√≥picos...");
    const { data: topicosData, error: topicosError } = await supabase
      .from("competition_topics")
      .insert(topicosTeste);

    if (topicosError) {
      console.error("‚ùå Erro ao inserir t√≥picos:", topicosError);
      return;
    }
    console.log(`‚úÖ ${topicosTeste.length} t√≥picos inseridos`);

    // 5. Inserir quest√µes
    console.log("‚ùì Inserindo quest√µes...");
    const { data: questoesData, error: questoesError } = await supabase
      .from("competition_questions")
      .insert(questoesTeste);

    if (questoesError) {
      console.error("‚ùå Erro ao inserir quest√µes:", questoesError);
      return;
    }
    console.log(`‚úÖ ${questoesTeste.length} quest√µes inseridas`);

    console.log("\nüéâ Base de dados populada com sucesso!");
    console.log("üìä Resumo:");
    console.log(`   ‚Ä¢ ${concursosTeste.length} concursos`);
    console.log(`   ‚Ä¢ ${disciplinasTeste.length} disciplinas`);
    console.log(`   ‚Ä¢ ${topicosTeste.length} t√≥picos`);
    console.log(`   ‚Ä¢ ${questoesTeste.length} quest√µes`);
    console.log("\nüîç IDs para teste:");
    console.log(`   ‚Ä¢ Concurso principal: ${concursosTeste[0].id}`);
    console.log(`   ‚Ä¢ Usu√°rio de teste: ${TEST_USER_ID}`);
  } catch (error) {
    console.error("‚ùå Erro geral ao popular base de dados:", error);
  }
}

async function createTestUser() {
  console.log("üë§ Verificando usu√°rio de teste...");

  try {
    // Tentar fazer login primeiro
    const { data: loginData, error: loginError } =
      await supabase.auth.signInWithPassword({
        email: "teste@stayfocus.com",
        password: "senha123!@#",
      });

    if (
      loginError &&
      loginError.message.includes("Invalid login credentials")
    ) {
      // Se n√£o conseguir fazer login, criar o usu√°rio
      console.log("üìù Criando novo usu√°rio de teste...");
      const { data, error } = await supabase.auth.signUp({
        email: "teste@stayfocus.com",
        password: "senha123!@#",
      });

      if (error) {
        console.log("‚ö†Ô∏è  Erro ao criar usu√°rio:", error.message);
      } else {
        console.log("‚úÖ Usu√°rio de teste criado:", data.user?.id);
        console.log("üìß Email:", data.user?.email);
      }
    } else if (loginData.user) {
      console.log("‚úÖ Usu√°rio de teste j√° existe:", loginData.user.id);
      console.log("üìß Email:", loginData.user.email);
    } else {
      console.log("‚ö†Ô∏è  Erro inesperado:", loginError?.message);
    }
  } catch (error) {
    console.log("‚ö†Ô∏è  Erro ao verificar usu√°rio:", error.message);
  }
}

// Executar o seeding
async function main() {
  console.log("üöÄ INICIANDO SEEDING DA BASE DE DADOS\n");

  // Primeiro verificar/criar usu√°rio de teste
  await createTestUser();

  console.log("\n" + "=".repeat(50) + "\n");

  // Depois popular com dados (j√° autenticado)
  await seedDatabase();

  console.log("\nüèÅ PROCESSO CONCLU√çDO");
  console.log(
    "üîó Para testar, acesse: http://localhost:3000/concursos/3c6dff36-4971-4f3e-ac56-701efa04cd86",
  );
}

main().catch(console.error);
