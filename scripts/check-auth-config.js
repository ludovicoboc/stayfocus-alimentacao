// Script para verificar configura√ß√µes que podem causar o erro
// Run with: node scripts/check-auth-config.js

require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkExtensions() {
  console.log('üîß Verificando extens√µes PostgreSQL...\n');
  
  try {
    // Tentar verificar extens√µes instaladas
    const { data, error } = await supabase
      .from('pg_extension')
      .select('extname');
    
    if (error) {
      console.error('‚ùå Erro ao verificar extens√µes:', error);
    } else {
      console.log('‚úÖ Extens√µes instaladas:');
      data?.forEach(ext => console.log(`  - ${ext.extname}`));
      
      const hasUUID = data?.some(ext => ext.extname === 'uuid-ossp');
      const hasCrypto = data?.some(ext => ext.extname === 'pgcrypto');
      
      console.log(`\nüìã uuid-ossp: ${hasUUID ? '‚úÖ' : '‚ùå'}`);
      console.log(`üìã pgcrypto: ${hasCrypto ? '‚úÖ' : '‚ùå'}`);
    }
  } catch (err) {
    console.error('‚ùå Exce√ß√£o ao verificar extens√µes:', err.message);
  }
}

async function checkRLSPolicies() {
  console.log('\nüîí Verificando pol√≠ticas RLS...\n');
  
  const tables = ['user_profiles', 'user_preferences', 'user_goals'];
  
  for (const table of tables) {
    try {
      const { data, error } = await supabase
        .from('pg_policies')
        .select('*')
        .eq('tablename', table);
      
      if (error) {
        console.error(`‚ùå Erro ao verificar pol√≠ticas da tabela ${table}:`, error);
      } else {
        console.log(`üìã Pol√≠ticas da tabela ${table}: ${data?.length || 0}`);
        if (data?.length) {
          data.forEach(policy => {
            console.log(`  - ${policy.policyname} (${policy.cmd})`);
          });
        }
      }
    } catch (err) {
      console.error(`‚ùå Exce√ß√£o ao verificar ${table}:`, err.message);
    }
  }
}

async function testBasicAuth() {
  console.log('\nüß™ Testando auth b√°sico...\n');
  
  try {
    // Testar obter usu√°rio atual (deve ser null)
    const { data: { user }, error } = await supabase.auth.getUser();
    
    if (error) {
      console.error('‚ùå Erro ao obter usu√°rio:', error);
    } else {
      console.log('‚úÖ Auth b√°sico funcionando:', user ? 'usu√°rio logado' : 'nenhum usu√°rio');
    }
    
    // Testar obter sess√£o
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.error('‚ùå Erro ao obter sess√£o:', sessionError);
    } else {
      console.log('‚úÖ Sess√£o:', session ? 'ativa' : 'nenhuma');
    }
    
  } catch (err) {
    console.error('‚ùå Exce√ß√£o no teste de auth:', err.message);
  }
}

async function testSignUpWithDifferentParams() {
  console.log('\nüß™ Testando signup com par√¢metros m√≠nimos...\n');
  
  const testEmail = `minimal+${Date.now()}@example.com`;
  
  try {
    // Teste 1: Signup m√≠nimo sem confirma√ß√£o
    console.log('üìß Tentativa 1: Signup m√≠nimo');
    const { data, error } = await supabase.auth.signUp({
      email: testEmail,
      password: 'senha123',
      options: {
        emailRedirectTo: undefined
      }
    });
    
    if (error) {
      console.error('‚ùå Erro no signup m√≠nimo:', error);
    } else {
      console.log('‚úÖ Signup m√≠nimo funcionou!', {
        user: data.user?.id ? 'criado' : 'n√£o criado',
        session: data.session ? 'ativa' : 'n√£o ativa'
      });
    }
    
  } catch (err) {
    console.error('‚ùå Exce√ß√£o no teste de signup:', err.message);
  }
}

async function main() {
  console.log('üîç Diagn√≥stico Completo do Auth\n');
  
  await checkExtensions();
  await checkRLSPolicies();
  await testBasicAuth();
  await testSignUpWithDifferentParams();
  
  console.log('\nüìã Pr√≥ximos passos para investigar:');
  console.log('1. Verificar configura√ß√µes do Auth no Dashboard Supabase');
  console.log('2. Verificar se confirma√ß√£o de email est√° habilitada');
  console.log('3. Verificar logs do Supabase (se dispon√≠vel)');
  console.log('4. Testar com usu√°rio diferente');
  
  console.log('\nüèÅ Diagn√≥stico conclu√≠do');
}

main().catch(console.error);