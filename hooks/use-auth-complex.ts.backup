"use client";

import { useState, useEffect, useCallback, useRef } from "react";
import { createClient } from "@/lib/supabase";
import { optimizedAuthCache } from "@/lib/auth-cache";
import { createDebouncedAuthCheck } from "@/lib/request-debouncer";
import { validateAuthState, onAuthStateChange } from "@/lib/auth-utils";
import type { User, Session } from "@supabase/supabase-js";

// Configura√ß√£o de otimiza√ß√£o
const INIT_TIMEOUT = 8000; // 8 segundos timeout para inicializa√ß√£o
const DEBOUNCE_KEY = "useAuth_validation";

export function useAuth() {
  const [user, setUser] = useState<User | null>(null);
  const [session, setSession] = useState<Session | null>(null);
  const [loading, setLoading] = useState(true);
  const [initialized, setInitialized] = useState(false);
  const initializationRef = useRef<boolean>(false);
  const supabase = createClient();

  // Criar fun√ß√£o debounced para valida√ß√£o de autentica√ß√£o
  const debouncedAuthValidation = useCallback(
    createDebouncedAuthCheck(
      DEBOUNCE_KEY,
      async (forceRefresh = false) => {
        console.log(`üîê [USE-AUTH] Executando valida√ß√£o ${forceRefresh ? 'for√ßada' : 'cached'}`);
        
        return await optimizedAuthCache.validateWithOptimizations(
          'auth_validation',
          async () => {
            const { user: validatedUser, error } = await validateAuthState(forceRefresh);
            
            if (error) {
              console.log("‚ÑπÔ∏è [USE-AUTH] Usu√°rio n√£o autenticado:", error);
              return {
                user: null,
                session: null,
                timestamp: Date.now(),
                expiry: Date.now(),
                isValid: false,
                source: 'fresh' as const
              };
            }
            
            const cached = optimizedAuthCache.getCachedAuth();
            return {
              user: validatedUser,
              session: cached?.session || null,
              timestamp: Date.now(),
              expiry: Date.now() + (5 * 60 * 1000),
              isValid: !!validatedUser,
              source: 'fresh' as const
            };
          },
          { forceRefresh }
        );
      }
    ),
    []
  );

  // Fun√ß√£o para inicializar autentica√ß√£o simplificada
  const initializeAuth = useCallback(async () => {
    // Evitar m√∫ltiplas inicializa√ß√µes
    if (initializationRef.current) {
      return;
    }
    
    initializationRef.current = true;
    console.log("üîê [USE-AUTH] Iniciando inicializa√ß√£o...");
    
    try {
      // Valida√ß√£o direta sem debounce para inicializa√ß√£o
      const { user: validatedUser, error } = await validateAuthState(false);
      
      if (error) {
        console.log("‚ÑπÔ∏è [USE-AUTH] Usu√°rio n√£o autenticado");
        setUser(null);
        setSession(null);
      } else {
        console.log("‚úÖ [USE-AUTH] Usu√°rio autenticado");
        const cached = optimizedAuthCache.getCachedAuth();
        setUser(validatedUser);
        setSession(cached?.session || null);
      }
    } catch (error) {
      console.error("‚ùå [USE-AUTH] Erro na inicializa√ß√£o:", error);
      setUser(null);
      setSession(null);
    } finally {
      setLoading(false);
      setInitialized(true);
      initializationRef.current = false;
    }
  }, []);  // Sem depend√™ncias para evitar re-cria√ß√£o

  // Efeito de inicializa√ß√£o - executado apenas uma vez
  useEffect(() => {
    initializeAuth();
  }, []); // Executar apenas na montagem

  // Efeito para configurar listener ap√≥s inicializa√ß√£o
  useEffect(() => {
    if (!initialized) return;

    const unsubscribe = onAuthStateChange((authUser) => {
      console.log("üîÑ [USE-AUTH] Auth state changed:", {
        hasUser: !!authUser,
        userId: authUser?.id?.substring(0, 8) + "..." || "none"
      });
      
      setUser(authUser);
      const currentCache = optimizedAuthCache.getCachedAuth();
      setSession(currentCache?.session || null);
    });

    return () => {
      unsubscribe();
    };
  }, [initialized]); // Apenas quando initialized mudar

  const signIn = async (email: string, password: string) => {
    try {
      console.log("üîê [USE-AUTH] Tentando fazer login para:", email);
      setLoading(true);

      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (error) {
        console.error("‚ùå [USE-AUTH] Erro no login:", error.message);
        throw error;
      }

      console.log("‚úÖ [USE-AUTH] Login realizado com sucesso:", {
        userId: data.user?.id?.substring(0, 8) + "...",
        email: data.user?.email,
      });

      // Atualizar cache com nova sess√£o
      if (data.user && data.session) {
        optimizedAuthCache.setCachedAuth(data.user, data.session, 'fresh');
      }

      return data;
    } catch (error) {
      console.error("‚ùå [USE-AUTH] Erro ao fazer login:", error);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  const signUp = async (email: string, password: string) => {
    try {
      console.log("üìù [USE-AUTH] Tentando criar conta para:", email);
      setLoading(true);

      const { data, error } = await supabase.auth.signUp({
        email,
        password,
      });

      if (error) {
        console.error("‚ùå [USE-AUTH] Erro na cria√ß√£o de conta:", error.message);
        throw error;
      }

      console.log("‚úÖ [USE-AUTH] Conta criada com sucesso:", {
        userId: data.user?.id?.substring(0, 8) + "...",
        email: data.user?.email,
        needsConfirmation: !data.session,
      });

      // Atualizar cache se h√° sess√£o
      if (data.user && data.session) {
        optimizedAuthCache.setCachedAuth(data.user, data.session, 'fresh');
      }

      return data;
    } catch (error) {
      console.error("‚ùå [USE-AUTH] Erro ao criar conta:", error);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  const signOut = async () => {
    try {
      console.log("üëã [USE-AUTH] Fazendo logout...");
      setLoading(true);

      const { error } = await supabase.auth.signOut();
      
      // Limpar cache independentemente do resultado
      optimizedAuthCache.clearCache();
      
      // Cancelar valida√ß√µes pendentes
      if (debouncedAuthValidation.cancel) {
        debouncedAuthValidation.cancel();
      }
      
      if (error) {
        console.error("‚ùå [USE-AUTH] Erro no logout:", error.message);
        throw error;
      }

      console.log("‚úÖ [USE-AUTH] Logout realizado com sucesso");
      setUser(null);
      setSession(null);
    } catch (error) {
      console.error("‚ùå [USE-AUTH] Erro ao fazer logout:", error);
      // Limpar estado local mesmo em caso de erro
      setUser(null);
      setSession(null);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  const refreshSession = async () => {
    try {
      console.log("üîÑ [USE-AUTH] Renovando sess√£o...");
      const { data, error } = await supabase.auth.refreshSession();

      if (error) {
        console.error("‚ùå [USE-AUTH] Erro ao renovar sess√£o:", error.message);
        optimizedAuthCache.clearCache();
        throw error;
      }

      if (data.session?.user) {
        // Atualizar cache com nova sess√£o
        optimizedAuthCache.setCachedAuth(data.session.user, data.session, 'fresh');
        setUser(data.session.user);
        setSession(data.session);
        
        console.log("‚úÖ [USE-AUTH] Sess√£o renovada com sucesso:", {
          userId: data.session.user.id?.substring(0, 8) + "..."
        });
      }

      return data;
    } catch (error) {
      console.error("‚ùå [USE-AUTH] Erro ao renovar sess√£o:", error);
      throw error;
    }
  };

  // Fun√ß√£o para for√ßar re-valida√ß√£o (√∫til para debugging)
  const forceRefreshAuth = useCallback(async () => {
    console.log("üîÑ [USE-AUTH] For√ßando refresh da autentica√ß√£o...");
    setLoading(true);
    
    try {
      const result = await debouncedAuthValidation(true);
      
      if (result && typeof result === 'object') {
        setUser(result.user);
        setSession(result.session);
      } else {
        setUser(null);
        setSession(null);
      }
    } catch (error) {
      console.error("‚ùå [USE-AUTH] Erro no refresh for√ßado:", error);
      setUser(null);
      setSession(null);
    } finally {
      setLoading(false);
    }
  }, [debouncedAuthValidation]);

  // Fun√ß√£o para obter m√©tricas de cache (√∫til para debugging)
  const getCacheMetrics = useCallback(() => {
    return optimizedAuthCache.getMetrics();
  }, []);

  return {
    // Estado
    user,
    session,
    loading,
    initialized,
    
    // Fun√ß√µes principais
    signIn,
    signUp,
    signOut,
    refreshSession,
    
    // Utilit√°rios
    isAuthenticated: !!user && !!session,
    forceRefreshAuth,
    getCacheMetrics,
    
    // Debug info
    get debugInfo() {
      return {
        initialized,
        loading,
        hasUser: !!user,
        hasSession: !!session,
        cacheMetrics: optimizedAuthCache.getMetrics(),
        debugInfo: optimizedAuthCache.getDebugInfo()
      };
    }
  };
}
